//  Copyright (C) 2023 Raphael Javaux
//  raphaeljavaux@gmail.com
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 3 of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program; if not, write to the Free Software Foundation,
//  Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#ifdef BACKEND_IS_CUDA
    #include <cuda.h>

    // Provides a basic CUDA compatibility layer over OpenCL.

    #define __kernel            __global__
    #define __device            __device__

    #define __global
    #define __local

    #define get_local_id(d)     (d == 0 ? threadIdx.x : (d == 1 ? threadIdx.y : threadIdx.z))
    #define get_local_size(d)   (d == 0 ? blockDim.x : (d == 1 ? blockDim.y : blockDim.z))
    #define get_group_id(d)     (d == 0 ? blockIdx.x : (d == 1 ? blockIdx.y : blockIdx.z))

    #define barrier(v)          (__syncthreads())
#endif

#ifdef BACKEND_IS_OPENCL
    #define __device
#endif

#ifdef USE_FLOAT16_BUFFERS
    #ifdef BACKEND_IS_CUDA
        #include <cuda_fp16.h>
    #endif
    #ifdef BACKEND_IS_OPENCL
        #pragma OPENCL EXTENSION cl_khr_fp16 : enable
    #endif

    typedef half enf;
#else
    typedef float enf;
#endif

#ifdef BACKEND_IS_CUDA
    extern "C" {
#endif

#define MAX_LOCAL_MEMORY_SIZE (24 * 1024)


__kernel void corr_coeffs(
    __global const int *offsets,
    int offsets_size,
    __global const enf *ref,
    __global const char *ref_mask,
    int ref_size,
    __global const enf *target,
    __global const char *target_mask,
    int target_size,
    __global float *coeffs,
    __global int *match_lens
);

#ifdef USE_LOCAL_MEMORY
    __device void _group_copy_to_local(
        __global const enf *src,
        __global const char *src_mask,
        __local enf *dst,
        __local char *dst_mask,
        int size
    );
#endif

__device void _corr_coeff(
    __global const enf *a,
    __global const char *mask_a,
    #ifdef USE_LOCAL_MEMORY
        __local const enf *b,
        __local const char *mask_b,
    #else
        __global const enf *b,
        __global const char *mask_b,
    #endif
    int size,
    __global float *coeff,
    __global int *match_len
);


__kernel void corr_coeffs(
    __global const int *offsets,
    int offsets_size,
    __global const enf *ref,
    __global const char *ref_mask,
    int ref_size,
    __global const enf *target,
    __global const char *target_mask,
    int target_size,
    __global float *coeffs,
    __global int *match_lens
)
{
    #ifdef USE_LOCAL_MEMORY
        // Caches the target signal in local memory.

        const int TARGET_ITEM_SIZE = sizeof (*target) + sizeof (*target_mask);
        const int LOCAL_CACHE_SIZE = MAX_LOCAL_MEMORY_SIZE / TARGET_ITEM_SIZE;

        #ifdef BACKEND_IS_CUDA
            __shared__ enf target_local[LOCAL_CACHE_SIZE];
            __shared__ char target_mask_local[LOCAL_CACHE_SIZE];
        #else
            __local enf target_local[LOCAL_CACHE_SIZE];
            __local char target_mask_local[LOCAL_CACHE_SIZE];
        #endif

        _group_copy_to_local(
            target, target_mask, target_local, target_mask_local, min(target_size, LOCAL_CACHE_SIZE)
        );
    #endif

    // Computes the comparison offsets.

    int i = get_group_id(0) * get_local_size(0) + get_local_id(0);

    if (i >= offsets_size) {
        return;
    }

    int offset = offsets[i];

    int ref_offset = max(0, offset);
    int target_offset = max(0, -offset);

    int size = min(ref_size - ref_offset, target_size - target_offset);

    __global const enf *ref_begin = ref + ref_offset;
    __global const char *ref_mask_begin = ref_mask + ref_offset;

    #ifdef USE_LOCAL_MEMORY
        __local const enf *target_begin = target_local + target_offset;
        __local const char *target_mask_begin = target_mask_local + target_offset;
    #else
        __global const enf *target_begin = target + target_offset;
        __global const char *target_mask_begin = target_mask + target_offset;
    #endif

    // Computes the corr. coefficient.

    _corr_coeff(
        ref_begin, ref_mask_begin, target_begin, target_mask_begin, size,
        &coeffs[i], &match_lens[i]
    );
}


#ifdef USE_LOCAL_MEMORY
    __device void _group_copy_to_local(
        __global const enf *src,
        __global const char *src_mask,
        __local enf *dst,
        __local char *dst_mask,
        int size
    )
    {
        int n_items_per_thread = (size + get_local_size(0) - 1) / get_local_size(0);

        int current_begin = get_local_id(0) * n_items_per_thread;
        int current_end = min(size, current_begin + n_items_per_thread);

        for (int i = current_begin; i < current_end; ++i) {
            dst[i] = src[i];
            dst_mask[i] = src_mask[i];
        }

        barrier(CLK_LOCAL_MEM_FENCE);
    }
#endif


__device void _corr_coeff(
    __global const enf *a,
    __global const char *mask_a,
    #ifdef USE_LOCAL_MEMORY
        __local const enf *b,
        __local const char *mask_b,
    #else
        __global const enf *b,
        __global const char *mask_b,
    #endif
    int size,
    __global float *coeff,
    __global int *match_len
)
{
    // Means and number of masked values

    int match_len_local = 0;
    float mean_a = 0.0f;
    float mean_b = 0.0f;

    for (size_t i = 0; i < size; ++i) {
        char mask = mask_a[i] & mask_b[i];
        match_len_local += mask;

        float mask_float = (float) mask;

        mean_a += (float) a[i] * mask_float;
        mean_b += (float) b[i] * mask_float;
    }

    if ((float)match_len_local / size < 0.05f) {
        *coeff = NAN;
        *match_len = 0;
        return;
    }

    mean_a /= match_len_local;
    mean_b /= match_len_local;

    // Cov and stdevs

    float std_a = 0.0f;
    float std_b = 0.0f;
    float cov = 0.0f;

    for (size_t i = 0; i < size; ++i) {
        float mask = (float) (mask_a[i] & mask_b[i]);

        float diff_a = ((float) a[i] - mean_a) * mask;
        float diff_b = ((float) b[i] - mean_b) * mask;

        std_a += diff_a * diff_a;
        std_b += diff_b * diff_b;
        cov += diff_a * diff_b;
    }

    std_a = sqrt(std_a / match_len_local);
    std_b = sqrt(std_b / match_len_local);
    cov /= match_len_local;

    // Writes results.

    *coeff = cov / (std_a * std_b);
    *match_len = match_len_local;
}

#ifdef BACKEND_IS_CUDA
    }
#endif
